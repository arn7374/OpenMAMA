#!/usr/bin/python
# -*- coding: utf-8 -*-
import os
Import('*')
env = env.Clone()

target = 'libmamaqpidimpl'

libPath = []
libPath.append('$libdir')
libPath.append(os.path.join(env['qpid_home'], 'lib'))
libPath.append(os.path.join(env['qpid_home'], 'lib64'))
libPath.append(os.path.join(env['libevent_home'], 'lib'))
libPath.append(os.path.join(env['libevent_home'], 'lib64'))

incPath = []
incPath.append('$qpid_home/include')
incPath.append('$libevent_home/include')
incPath.append('#mama/c_cpp/src/c')

env['CCFLAGS'] = [x for x in env['CCFLAGS'] if x != '-pedantic-errors']

if env['host']['os'] == 'Darwin':
    env.Append(LIBS=['qpid-proton', 'mama', 'm', 'wombatcommon', 'event'],
               LIBPATH=libPath, CPPPATH=incPath)
else:
    env.Append(LIBS=['qpid-proton', 'mama', 'm', 'wombatcommon', 'uuid', 'event'],
               LIBPATH=libPath, CPPPATH=incPath)

env.Append(CFLAGS=['-Werror'])

env.Append( CPPDEFINES 	= ['OPENMAMA_INTEGRATION'] )

conf = Configure(env, config_h='./config.h', log_file='./config.log')

if not env.GetOption('clean'):
    if not conf.CheckCHeader('uuid/uuid.h'):
        print '+- libuuid-devel required'
        Exit(1)
    if not conf.CheckCHeader('proton/parser.h'):
        print '+- could not find parser.h in ${QPID_HOME}/include/proton'
        Exit(1)
    if not conf.CheckCHeader('proton/version.h'):
        print '+- proton release does not have ${QPID_HOME}/include/proton/version.h - too old!'
        Exit(1)

env = conf.Finish()

sources = Glob('*.c')

lib = []
lib.append(env.SharedLibrary(target, sources))
lib.append(env.StaticLibrary(target, [sources]))

Alias('install', env.Install('$libdir', lib))

# Install the qpid proton and libevent shared objects
if env['with_dependency_runtimes']:
    if env['target_arch'] == "x86_64":
        Alias ('install', env.Install('$libdir', Glob('%s/lib64/libqpid-proton.so*' % env['qpid_home'])))
        Alias ('install', env.Install('$libdir', Glob('%s/lib64/libevent.so*' % env['libevent_home'])))
    else:
        Alias ('install', env.Install('$libdir', Glob('%s/lib/libqpid-proton.so*' % env['qpid_home'])))
        Alias ('install', env.Install('$libdir', Glob('%s/lib/libevent.so*' % env['libevent_home'])))

